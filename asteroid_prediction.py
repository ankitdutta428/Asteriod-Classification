# -*- coding: utf-8 -*-
"""asteroid-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xmNm4me_ByR0EIwn5gndRdCvOstPkQLF
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import warnings

data=pd.read_csv('/kaggle/input/nasa-asteroids-classification/nasa.csv')
data.head()

data.columns

data.info()

data_new=data.drop(['Neo Reference ID','Name','Orbit ID','Close Approach Date','Epoch Date Close Approach','Orbit Determination Date'],axis=1)
data_new.head()

data_new.info()

unique_find=data_new['Orbiting Body'].unique()
print(unique_find)

#As Earth is the only string/object in the column it is better to remove the column.
data_new=data_new.drop(['Orbiting Body'], axis=1)

data_new.info()

unique_find_2=data_new['Equinox'].unique()
print(unique_find_2)
data_new=data_new.drop(['Equinox'],axis=1)
data_new.info()

#Now, we plot the heatmap to understand the correlation between the various parameters and then it will help us to predict the hazardous ness of the asteriod.
plt.figure(figsize=(20,20))
sns.heatmap(data_new.corr(),annot=True,cmap="coolwarm")

#As we can notice, there are many values which are 1 correlated with each other, so we can just keep one of the columns from each group
#and drop the rest.
data_new=data_new.drop(['Est Dia in KM(max)', 'Est Dia in M(min)', 'Est Dia in M(max)',
       'Est Dia in Miles(min)', 'Est Dia in Miles(max)',
       'Est Dia in Feet(min)', 'Est Dia in Feet(max)','Relative Velocity km per hr', 'Miles per hour','Miss Dist.(Astronomical)', 'Miss Dist.(lunar)',
                       'Miss Dist.(miles)'], axis=1)
data_new.head()

#Now, we plot the new heatmap to clear visualisation
plt.figure(figsize=(20,20))
sns.heatmap(data_new.corr(),cmap="coolwarm",annot=True)

#As the dataset result is in the form of True and False, we can use one-hot encoding to change the True and False 1 and 0 respectively.
data_new['Hazardous']=data_new['Hazardous'].replace({True:1, False:0})
data_new.head()

data_new.describe()

"""# **Using the Model**"""

#We now use the model.
y=data_new['Hazardous'].astype(int)
X=data_new.drop(['Hazardous'], axis=1)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, random_state=0, test_size=0.25)

from matplotlib import pyplot
from xgboost import XGBClassifier
from xgboost import plot_importance

model=XGBClassifier()

model.fit(X_train,y_train)
plot_importance(model)
pyplot.show()

#We plot the F-score of the features and conclude the most important and least important features

from sklearn.metrics import accuracy_score
preds=model.predict(X_test)
accu=accuracy_score(preds,y_test)
print(accu)

